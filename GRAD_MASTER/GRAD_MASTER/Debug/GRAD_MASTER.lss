
GRAD_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b8  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d0  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000136e  00000000  00000000  000003b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000078c  00000000  00000000  00001725  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000066e  00000000  00000000  00001eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00002520  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000223  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000385  00000000  00000000  00002873  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000260  00000260  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.DIO_voidSetPinDirection 000000ec  0000006c  0000006c  000000c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.DIO_voidSetPortDirection 00000054  00000158  00000158  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000002e  0000021a  0000021a  0000026e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.SPI_InitMaster 00000036  000001e4  000001e4  00000238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.SPI_SendData 00000008  00000248  00000248  0000029c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.UART_Init 00000038  000001ac  000001ac  00000200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.UART_sendData 00000008  00000250  00000250  000002a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.UART_recieveData 00000008  00000258  00000258  000002ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
   8:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
   c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  10:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  14:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  18:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  1c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  20:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  24:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  28:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  2c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  30:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  34:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  38:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  3c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  40:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  44:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  48:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  4c:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>
  50:	0c 94 30 01 	jmp	0x260	; 0x260 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  64:	0c 94 34 00 	jmp	0x68	; 0x68 <_exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000260 <__bad_interrupt>:
 260:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_voidSetPinDirection:

0000006c <DIO_voidSetPinDirection>:
	return 0;
	}
	
	return local_Data;
	
}
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_voidSetPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_voidSetPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_voidSetPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_voidSetPinDirection+0xea>
  78:	41 11       	cpse	r20, r1
  7a:	38 c0       	rjmp	.+112    	; 0xec <DIO_voidSetPinDirection+0x80>
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	91 f0       	breq	.+36     	; 0xa4 <DIO_voidSetPinDirection+0x38>
  80:	28 f0       	brcs	.+10     	; 0x8c <DIO_voidSetPinDirection+0x20>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	d9 f0       	breq	.+54     	; 0xbc <DIO_voidSetPinDirection+0x50>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	29 f1       	breq	.+74     	; 0xd4 <DIO_voidSetPinDirection+0x68>
  8a:	08 95       	ret
  8c:	2a b3       	in	r18, 0x1a	; 26
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <DIO_voidSetPinDirection+0x2c>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <DIO_voidSetPinDirection+0x28>
  9c:	80 95       	com	r24
  9e:	82 23       	and	r24, r18
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	08 95       	ret
  a4:	27 b3       	in	r18, 0x17	; 23
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_voidSetPinDirection+0x44>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_voidSetPinDirection+0x40>
  b4:	80 95       	com	r24
  b6:	82 23       	and	r24, r18
  b8:	87 bb       	out	0x17, r24	; 23
  ba:	08 95       	ret
  bc:	24 b3       	in	r18, 0x14	; 20
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetPinDirection+0x5c>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetPinDirection+0x58>
  cc:	80 95       	com	r24
  ce:	82 23       	and	r24, r18
  d0:	84 bb       	out	0x14, r24	; 20
  d2:	08 95       	ret
  d4:	21 b3       	in	r18, 0x11	; 17
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_voidSetPinDirection+0x74>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_voidSetPinDirection+0x70>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	81 bb       	out	0x11, r24	; 17
  ea:	08 95       	ret
  ec:	41 30       	cpi	r20, 0x01	; 1
  ee:	99 f5       	brne	.+102    	; 0x156 <DIO_voidSetPinDirection+0xea>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	89 f0       	breq	.+34     	; 0x116 <DIO_voidSetPinDirection+0xaa>
  f4:	28 f0       	brcs	.+10     	; 0x100 <DIO_voidSetPinDirection+0x94>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	c9 f0       	breq	.+50     	; 0x12c <DIO_voidSetPinDirection+0xc0>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	11 f1       	breq	.+68     	; 0x142 <DIO_voidSetPinDirection+0xd6>
  fe:	08 95       	ret
 100:	2a b3       	in	r18, 0x1a	; 26
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_voidSetPinDirection+0xa0>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_voidSetPinDirection+0x9c>
 110:	82 2b       	or	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_voidSetPinDirection+0xb6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_voidSetPinDirection+0xb2>
 126:	82 2b       	or	r24, r18
 128:	87 bb       	out	0x17, r24	; 23
 12a:	08 95       	ret
 12c:	24 b3       	in	r18, 0x14	; 20
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_voidSetPinDirection+0xcc>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_voidSetPinDirection+0xc8>
 13c:	82 2b       	or	r24, r18
 13e:	84 bb       	out	0x14, r24	; 20
 140:	08 95       	ret
 142:	21 b3       	in	r18, 0x11	; 17
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_voidSetPinDirection+0xe2>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_voidSetPinDirection+0xde>
 152:	82 2b       	or	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

Disassembly of section .text.DIO_voidSetPortDirection:

00000158 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 PORTID, u8 Direction){
	
	/*Range Check*/
	
	if (PORTID < 4){
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	38 f5       	brcc	.+78     	; 0x1aa <DIO_voidSetPortDirection+0x52>
		if (Direction == OUTPUT){
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	a1 f4       	brne	.+40     	; 0x188 <DIO_voidSetPortDirection+0x30>
			
			
			switch(PORTID){
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	49 f0       	breq	.+18     	; 0x176 <DIO_voidSetPortDirection+0x1e>
 164:	28 f0       	brcs	.+10     	; 0x170 <DIO_voidSetPortDirection+0x18>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	49 f0       	breq	.+18     	; 0x17c <DIO_voidSetPortDirection+0x24>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	51 f0       	breq	.+20     	; 0x182 <DIO_voidSetPortDirection+0x2a>
 16e:	08 95       	ret
			
			case PORTA:  DDRA_REG = 0b11111111;        break;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	8a bb       	out	0x1a, r24	; 26
 174:	08 95       	ret
			case PORTB:  DDRB_REG = 0b11111111;        break;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	87 bb       	out	0x17, r24	; 23
 17a:	08 95       	ret
			case PORTC:  DDRB_REG = 0b11111111;        break;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	87 bb       	out	0x17, r24	; 23
 180:	08 95       	ret
			case PORTD:  DDRD_REG = 0b11111111;        break;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	81 bb       	out	0x11, r24	; 17
 186:	08 95       	ret
			
	    }
		}else if(Direction == INPUT){
 188:	61 11       	cpse	r22, r1
 18a:	0f c0       	rjmp	.+30     	; 0x1aa <DIO_voidSetPortDirection+0x52>
			
			
			switch(PORTID){
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	41 f0       	breq	.+16     	; 0x1a0 <DIO_voidSetPortDirection+0x48>
 190:	28 f0       	brcs	.+10     	; 0x19c <DIO_voidSetPortDirection+0x44>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	39 f0       	breq	.+14     	; 0x1a4 <DIO_voidSetPortDirection+0x4c>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	39 f0       	breq	.+14     	; 0x1a8 <DIO_voidSetPortDirection+0x50>
 19a:	08 95       	ret
			
			case PORTA:  DDRA_REG = 0b00000000;        break;
 19c:	1a ba       	out	0x1a, r1	; 26
 19e:	08 95       	ret
			case PORTB:  DDRB_REG = 0b00000000;        break;
 1a0:	17 ba       	out	0x17, r1	; 23
 1a2:	08 95       	ret
			case PORTC:  DDRC_REG = 0b00000000;        break;
 1a4:	14 ba       	out	0x14, r1	; 20
 1a6:	08 95       	ret
			case PORTD:  DDRD_REG = 0b00000000;        break;
 1a8:	11 ba       	out	0x11, r1	; 17
 1aa:	08 95       	ret

Disassembly of section .text.main:

0000021a <main>:



int main(void)
{
DIO_voidSetPortDirection(PORTA,OUTPUT);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_voidSetPortDirection>
  u8 uartData;
	  SPI_InitMaster();
 222:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <SPI_InitMaster>
	  UART_Init();
 226:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_Init>
	
	
    while(1)
    {
		   uartData = UART_recieveData();
 22a:	0e 94 2c 01 	call	0x258	; 0x258 <UART_recieveData>
 22e:	c8 2f       	mov	r28, r24
		   UART_sendData(uartData);
 230:	0e 94 28 01 	call	0x250	; 0x250 <UART_sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	87 ea       	ldi	r24, 0xA7	; 167
 236:	91 e6       	ldi	r25, 0x61	; 97
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x1e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x24>
 23e:	00 00       	nop
		   _delay_ms(100);
           SPI_SendData(uartData);
 240:	8c 2f       	mov	r24, r28
 242:	0e 94 24 01 	call	0x248	; 0x248 <SPI_SendData>
 246:	f1 cf       	rjmp	.-30     	; 0x22a <main+0x10>

Disassembly of section .text.SPI_InitMaster:

000001e4 <SPI_InitMaster>:
	//sck pin input
	DIO_voidSetPinDirection(PORTB,7,INPUT);
	// slave mode
	CLR_BIT(SPCR,4);
	//enable spi
	SET_BIT(SPCR,6);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	64 e0       	ldi	r22, 0x04	; 4
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	65 e0       	ldi	r22, 0x05	; 5
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	66 e0       	ldi	r22, 0x06	; 6
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	67 e0       	ldi	r22, 0x07	; 7
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 20c:	8d b1       	in	r24, 0x0d	; 13
 20e:	80 61       	ori	r24, 0x10	; 16
 210:	8d b9       	out	0x0d, r24	; 13
 212:	8d b1       	in	r24, 0x0d	; 13
 214:	80 64       	ori	r24, 0x40	; 64
 216:	8d b9       	out	0x0d, r24	; 13
 218:	08 95       	ret

Disassembly of section .text.SPI_SendData:

00000248 <SPI_SendData>:


void SPI_SendData(u8 Data){
	
	// send data by spi
	SPDR = Data;
 248:	8f b9       	out	0x0f, r24	; 15
	
	//wait till interrupt flag is 1 (data is sent correctly)
	while (GET_BIT(SPSR,7) != 1);
 24a:	77 9b       	sbis	0x0e, 7	; 14
 24c:	fe cf       	rjmp	.-4      	; 0x24a <SPI_SendData+0x2>
}
 24e:	08 95       	ret

Disassembly of section .text.UART_Init:

000001ac <UART_Init>:
#include "UART_Interface.h"

void UART_Init(void){
	
	
	SET_BIT(DDRD_REG,0);
 1ac:	81 b3       	in	r24, 0x11	; 17
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD_REG,1);
 1b2:	81 b3       	in	r24, 0x11	; 17
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	81 bb       	out	0x11, r24	; 17
    SET_BIT(UCSRC,7);
 1b8:	80 b5       	in	r24, 0x20	; 32
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	80 bd       	out	0x20, r24	; 32
	
	// Enable the RX and TX 
	SET_BIT(UCSRB,3);
 1be:	8a b1       	in	r24, 0x0a	; 10
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,4);
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	8a b9       	out	0x0a, r24	; 10
	// Data frame format 
	SET_BIT(UCSRC,1);
 1ca:	80 b5       	in	r24, 0x20	; 32
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,2);
 1d0:	80 b5       	in	r24, 0x20	; 32
 1d2:	84 60       	ori	r24, 0x04	; 4
 1d4:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRB,2);
 1d6:	8a b1       	in	r24, 0x0a	; 10
 1d8:	8b 7f       	andi	r24, 0xFB	; 251
 1da:	8a b9       	out	0x0a, r24	; 10
	//CLR_BIT(UCSRC,6);
	//SET_BIT(UCSRC,5);
	//CLR_BIT(UCSRC,4);
	// Set BaudRate
	//CLR_BIT(UBRRH,7);
	UBRRH = 0;
 1dc:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103;
 1de:	87 e6       	ldi	r24, 0x67	; 103
 1e0:	89 b9       	out	0x09, r24	; 9
 1e2:	08 95       	ret

Disassembly of section .text.UART_sendData:

00000250 <UART_sendData>:

	
}
void UART_sendData(u8 data){
	//u8 bufferState = GET_BIT(UCSRA,5);
	while ( GET_BIT(UCSRA,5) == 0);
 250:	5d 9b       	sbis	0x0b, 5	; 11
 252:	fe cf       	rjmp	.-4      	; 0x250 <UART_sendData>

	UDR = data;
 254:	8c b9       	out	0x0c, r24	; 12
 256:	08 95       	ret

Disassembly of section .text.UART_recieveData:

00000258 <UART_recieveData>:
}
u8 UART_recieveData(){
	//u8 recieveComplete = GET_BIT(UCSRA,7);
	
	while ( GET_BIT(UCSRA,7) == 0);
 258:	5f 9b       	sbis	0x0b, 7	; 11
 25a:	fe cf       	rjmp	.-4      	; 0x258 <UART_recieveData>
	
	return UDR;
 25c:	8c b1       	in	r24, 0x0c	; 12
	
 25e:	08 95       	ret
