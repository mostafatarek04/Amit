
GRAD_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002de  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  0000030d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000fb5  00000000  00000000  000003ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000069d  00000000  00000000  00001362  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004fa  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ec  00000000  00000000  00001efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000213  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000033d  00000000  00000000  000021fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000286  00000286  000002da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.DIO_voidSetPinDirection 000000ec  0000006c  0000006c  000000c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.DIO_voidTogglePinValue 00000070  00000158  00000158  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_voidSetPortDirection 00000054  000001c8  000001c8  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000002c  00000252  00000252  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.SPI_InitSlave 00000036  0000021c  0000021c  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.SPI_RecieveData 00000008  0000027e  0000027e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 29 01 	call	0x252	; 0x252 <main>
  64:	0c 94 34 00 	jmp	0x68	; 0x68 <_exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000286 <__bad_interrupt>:
 286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.DIO_voidSetPinDirection:

0000006c <DIO_voidSetPinDirection>:
	return 0;
	}
	
	return local_Data;
	
}
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_voidSetPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_voidSetPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_voidSetPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_voidSetPinDirection+0xea>
  78:	41 11       	cpse	r20, r1
  7a:	38 c0       	rjmp	.+112    	; 0xec <DIO_voidSetPinDirection+0x80>
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	91 f0       	breq	.+36     	; 0xa4 <DIO_voidSetPinDirection+0x38>
  80:	28 f0       	brcs	.+10     	; 0x8c <DIO_voidSetPinDirection+0x20>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	d9 f0       	breq	.+54     	; 0xbc <DIO_voidSetPinDirection+0x50>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	29 f1       	breq	.+74     	; 0xd4 <DIO_voidSetPinDirection+0x68>
  8a:	08 95       	ret
  8c:	2a b3       	in	r18, 0x1a	; 26
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <DIO_voidSetPinDirection+0x2c>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <DIO_voidSetPinDirection+0x28>
  9c:	80 95       	com	r24
  9e:	82 23       	and	r24, r18
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	08 95       	ret
  a4:	27 b3       	in	r18, 0x17	; 23
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_voidSetPinDirection+0x44>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_voidSetPinDirection+0x40>
  b4:	80 95       	com	r24
  b6:	82 23       	and	r24, r18
  b8:	87 bb       	out	0x17, r24	; 23
  ba:	08 95       	ret
  bc:	24 b3       	in	r18, 0x14	; 20
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetPinDirection+0x5c>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetPinDirection+0x58>
  cc:	80 95       	com	r24
  ce:	82 23       	and	r24, r18
  d0:	84 bb       	out	0x14, r24	; 20
  d2:	08 95       	ret
  d4:	21 b3       	in	r18, 0x11	; 17
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_voidSetPinDirection+0x74>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_voidSetPinDirection+0x70>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	81 bb       	out	0x11, r24	; 17
  ea:	08 95       	ret
  ec:	41 30       	cpi	r20, 0x01	; 1
  ee:	99 f5       	brne	.+102    	; 0x156 <DIO_voidSetPinDirection+0xea>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	89 f0       	breq	.+34     	; 0x116 <DIO_voidSetPinDirection+0xaa>
  f4:	28 f0       	brcs	.+10     	; 0x100 <DIO_voidSetPinDirection+0x94>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	c9 f0       	breq	.+50     	; 0x12c <DIO_voidSetPinDirection+0xc0>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	11 f1       	breq	.+68     	; 0x142 <DIO_voidSetPinDirection+0xd6>
  fe:	08 95       	ret
 100:	2a b3       	in	r18, 0x1a	; 26
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_voidSetPinDirection+0xa0>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_voidSetPinDirection+0x9c>
 110:	82 2b       	or	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_voidSetPinDirection+0xb6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_voidSetPinDirection+0xb2>
 126:	82 2b       	or	r24, r18
 128:	87 bb       	out	0x17, r24	; 23
 12a:	08 95       	ret
 12c:	24 b3       	in	r18, 0x14	; 20
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_voidSetPinDirection+0xcc>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_voidSetPinDirection+0xc8>
 13c:	82 2b       	or	r24, r18
 13e:	84 bb       	out	0x14, r24	; 20
 140:	08 95       	ret
 142:	21 b3       	in	r18, 0x11	; 17
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_voidSetPinDirection+0xe2>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_voidSetPinDirection+0xde>
 152:	82 2b       	or	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

Disassembly of section .text.DIO_voidTogglePinValue:

00000158 <DIO_voidTogglePinValue>:
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	a8 f5       	brcc	.+106    	; 0x1c6 <DIO_voidTogglePinValue+0x6e>
 15c:	68 30       	cpi	r22, 0x08	; 8
 15e:	98 f5       	brcc	.+102    	; 0x1c6 <DIO_voidTogglePinValue+0x6e>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	89 f0       	breq	.+34     	; 0x186 <DIO_voidTogglePinValue+0x2e>
 164:	28 f0       	brcs	.+10     	; 0x170 <DIO_voidTogglePinValue+0x18>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	c9 f0       	breq	.+50     	; 0x19c <DIO_voidTogglePinValue+0x44>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	11 f1       	breq	.+68     	; 0x1b2 <DIO_voidTogglePinValue+0x5a>
 16e:	08 95       	ret
 170:	2b b3       	in	r18, 0x1b	; 27
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidTogglePinValue+0x24>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidTogglePinValue+0x20>
 180:	82 27       	eor	r24, r18
 182:	8b bb       	out	0x1b, r24	; 27
 184:	08 95       	ret
 186:	28 b3       	in	r18, 0x18	; 24
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_voidTogglePinValue+0x3a>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_voidTogglePinValue+0x36>
 196:	82 27       	eor	r24, r18
 198:	88 bb       	out	0x18, r24	; 24
 19a:	08 95       	ret
 19c:	25 b3       	in	r18, 0x15	; 21
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_voidTogglePinValue+0x50>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_voidTogglePinValue+0x4c>
 1ac:	82 27       	eor	r24, r18
 1ae:	85 bb       	out	0x15, r24	; 21
 1b0:	08 95       	ret
 1b2:	22 b3       	in	r18, 0x12	; 18
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_voidTogglePinValue+0x66>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_voidTogglePinValue+0x62>
 1c2:	82 27       	eor	r24, r18
 1c4:	82 bb       	out	0x12, r24	; 18
 1c6:	08 95       	ret

Disassembly of section .text.DIO_voidSetPortDirection:

000001c8 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 PORTID, u8 Direction){
	
	/*Range Check*/
	
	if (PORTID < 4){
 1c8:	84 30       	cpi	r24, 0x04	; 4
 1ca:	38 f5       	brcc	.+78     	; 0x21a <DIO_voidSetPortDirection+0x52>
		if (Direction == OUTPUT){
 1cc:	61 30       	cpi	r22, 0x01	; 1
 1ce:	a1 f4       	brne	.+40     	; 0x1f8 <DIO_voidSetPortDirection+0x30>
			
			
			switch(PORTID){
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	49 f0       	breq	.+18     	; 0x1e6 <DIO_voidSetPortDirection+0x1e>
 1d4:	28 f0       	brcs	.+10     	; 0x1e0 <DIO_voidSetPortDirection+0x18>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	49 f0       	breq	.+18     	; 0x1ec <DIO_voidSetPortDirection+0x24>
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	51 f0       	breq	.+20     	; 0x1f2 <DIO_voidSetPortDirection+0x2a>
 1de:	08 95       	ret
			
			case PORTA:  DDRA_REG = 0b11111111;        break;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	8a bb       	out	0x1a, r24	; 26
 1e4:	08 95       	ret
			case PORTB:  DDRB_REG = 0b11111111;        break;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	87 bb       	out	0x17, r24	; 23
 1ea:	08 95       	ret
			case PORTC:  DDRC_REG = 0b11111111;        break;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	84 bb       	out	0x14, r24	; 20
 1f0:	08 95       	ret
			case PORTD:  DDRD_REG = 0b11111111;        break;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	81 bb       	out	0x11, r24	; 17
 1f6:	08 95       	ret
			
	    }
		}else if(Direction == INPUT){
 1f8:	61 11       	cpse	r22, r1
 1fa:	0f c0       	rjmp	.+30     	; 0x21a <DIO_voidSetPortDirection+0x52>
			
			
			switch(PORTID){
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	41 f0       	breq	.+16     	; 0x210 <DIO_voidSetPortDirection+0x48>
 200:	28 f0       	brcs	.+10     	; 0x20c <DIO_voidSetPortDirection+0x44>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	39 f0       	breq	.+14     	; 0x214 <DIO_voidSetPortDirection+0x4c>
 206:	83 30       	cpi	r24, 0x03	; 3
 208:	39 f0       	breq	.+14     	; 0x218 <DIO_voidSetPortDirection+0x50>
 20a:	08 95       	ret
			
			case PORTA:  DDRA_REG = 0b00000000;        break;
 20c:	1a ba       	out	0x1a, r1	; 26
 20e:	08 95       	ret
			case PORTB:  DDRB_REG = 0b00000000;        break;
 210:	17 ba       	out	0x17, r1	; 23
 212:	08 95       	ret
			case PORTC:  DDRC_REG = 0b00000000;        break;
 214:	14 ba       	out	0x14, r1	; 20
 216:	08 95       	ret
			case PORTD:  DDRD_REG = 0b00000000;        break;
 218:	11 ba       	out	0x11, r1	; 17
 21a:	08 95       	ret

Disassembly of section .text.main:

00000252 <main>:

int main(void)
{
	
	 u8 spiData;
	DIO_voidSetPortDirection(PORTC,OUTPUT);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_voidSetPortDirection>
	SPI_InitSlave();
 25a:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_InitSlave>
    while(1)
    {
		
         spiData = SPI_RecieveData();
 25e:	0e 94 3f 01 	call	0x27e	; 0x27e <SPI_RecieveData>
 262:	c8 2f       	mov	r28, r24
	
	     if (spiData == '1')
 264:	81 33       	cpi	r24, 0x31	; 49
 266:	21 f4       	brne	.+8      	; 0x270 <main+0x1e>
	     {
			 DIO_voidTogglePinValue(PORTC,0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_voidTogglePinValue>
	     }
		 
		    if (spiData == '2')
 270:	c2 33       	cpi	r28, 0x32	; 50
 272:	a9 f7       	brne	.-22     	; 0x25e <main+0xc>
		    {
			    DIO_voidTogglePinValue(PORTC,1);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_voidTogglePinValue>
 27c:	f0 cf       	rjmp	.-32     	; 0x25e <main+0xc>

Disassembly of section .text.SPI_InitSlave:

0000021c <SPI_InitSlave>:
	// send data by spi
	SPDR = Data;
	
	//wait till interrupt flag is 1 (data is sent correctly)
	while (GET_BIT(SPSR,7) != 1);
}
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	64 e0       	ldi	r22, 0x04	; 4
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	65 e0       	ldi	r22, 0x05	; 5
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	66 e0       	ldi	r22, 0x06	; 6
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	67 e0       	ldi	r22, 0x07	; 7
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
 244:	8d b1       	in	r24, 0x0d	; 13
 246:	8f 7e       	andi	r24, 0xEF	; 239
 248:	8d b9       	out	0x0d, r24	; 13
 24a:	8d b1       	in	r24, 0x0d	; 13
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	8d b9       	out	0x0d, r24	; 13
 250:	08 95       	ret

Disassembly of section .text.SPI_RecieveData:

0000027e <SPI_RecieveData>:

u8 SPI_RecieveData(){

	
	//wait till interrupt flag is 1 (data is recieved correctly)
	while (GET_BIT(SPSR,7) != 1);
 27e:	77 9b       	sbis	0x0e, 7	; 14
 280:	fe cf       	rjmp	.-4      	; 0x27e <SPI_RecieveData>
	// return data
	return SPDR;
 282:	8f b1       	in	r24, 0x0f	; 15
 284:	08 95       	ret
